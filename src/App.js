import React, { useState } from 'react';
import logo from './logo.svg';
import './App.css';
import { Tree, TreeNode } from 'react-organizational-chart';
import { PieChart, Pie, Sector, Cell, ResponsiveContainer } from 'recharts';
import {
  Text,
  Font,
  Page,
  View,
  Image,
  Document,
  StyleSheet,
  PDFDownloadLink
} from '@react-pdf/renderer';

import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

import { PDFExport, savePDF } from '@progress/kendo-react-pdf';

function App() {
  const data01 = [
    { name: 'Group A', value: 400 },
    { name: 'Group B', value: 300 },
    { name: 'Group C', value: 300 },
    { name: 'Group D', value: 200 },
  ];
  const data02 = [
    { name: 'A1', value: 100 },
    { name: 'A2', value: 300 },
    { name: 'B1', value: 100 },
    { name: 'B2', value: 80 },
    { name: 'B3', value: 40 },
    { name: 'B4', value: 30 },
    { name: 'B5', value: 50 },
    { name: 'C1', value: 100 },
    { name: 'C2', value: 200 },
    { name: 'D1', value: 150 },
    { name: 'D2', value: 50 },
  ];

  const StyledTreeExample = () => (
    <Tree label={<div>Root</div>}>
      <TreeNode label={<div>Child 1</div>}>
        <TreeNode label={<div>Grand Child</div>} />
      </TreeNode>
    </Tree>
  );
  
  const Resume = () => (
    <Document>
    <Page wrap={false}>
      <View>
      <Text>This IS the candidate you are looking for</Text>
        <View>
          <Image
            src="https://images.pexels.com/photos/8443482/pexels-photo-8443482.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940"
          />
        </View>
        </View>
      </Page>
      <Page wrap={false}>
        <View>
        <Text>Charts</Text>
        <View wrap={false}>
        <PieChart width={400} height={400}>
            <Pie data={data01} dataKey="value" cx="50%" cy="50%" outerRadius={60} fill="#8884d8" />
            <Pie data={data02} dataKey="value" cx="50%" cy="50%" innerRadius={70} outerRadius={90} fill="#82ca9d" label />
          </PieChart>
        </View>
          
        </View>
        </Page>
    </Document>
  );
  const generate = async () => {
    var input = document.getElementById('print')
		html2canvas(input,{
      logging:false,
      background:'#fff',
      allowTaint: true,
      taintTest: false,
      useCORS:true,
      height: input.scrollHeight + 10,//
      width: input.scrollWidth,
      async:false
    }).then((canvas)=> {
      
			

      var contentWidth = canvas.width;
      var contentHeight = canvas.height;
      console.log('contentWidth', contentWidth);
      console.log('contentHeight', contentHeight);
      
      //One page of pdf displays the height of canvas generated by html page;
      const pageHeight = contentWidth / 592.28 * 841.89;
      //Height of html page without pdf generated
      let leftHeight = contentHeight;
      //Page offset
      let position = 0;
      //The size of a4 paper [595.28,841.89], the width and height of the canvas generated by the html page in the pdf
      const imgWidth = 595.28;
      const imgHeight = 592.28 / contentWidth * contentHeight;
      const pageData = canvas.toDataURL('image/jpeg', 1.0);
      const pdf = new jsPDF('', 'pt', 'a4');

      if(leftHeight < pageHeight) {
        pdf.addImage(pageData, 'JPEG', 0, 0, imgWidth,imgHeight);
    } else {
        while(leftHeight > 0) {
            //arg3-->distance left margin; arg4-->distance top margin; arg5-->width; arg6->height
            pdf.addImage(pageData, 'JPEG', 0, position,imgWidth, imgHeight)
            leftHeight -= pageHeight;
            position -= 841.89;
            //Avoid adding blank pages
            if(leftHeight > 0) {
                pdf.addPage();
            }
        }
    }
    pdf.save('Process form information.pdf');

      });
  }


  // const exportPDFWithMethod = () => {
  //   let element = container.current || document.body;
  //   savePDF(element, {
  //     paperSize: "auto",
  //     margin: 40,
  //     fileName: `Report for ${new Date().getFullYear()}`,
  //   });
  // };

  const exportPDFWithComponent = () => {
    if (pdfExportComponent.current) {
      pdfExportComponent.current.save();
    }
  };

  const pdfExportComponent = React.useRef(null);

  return (
    <div className="App">
    <button onClick={generate}> Generate pdf with jsPDF</button>
    <button  onClick={exportPDFWithComponent}>Generate pdf with Kendo</button>
    <PDFExport paperSize={'Letter'}
    fileName="PDf-with-Kendo.pdf"
    title=""
    subject=""
    keywords=""
    ref={pdfExportComponent}>
        <div id="print" style={{width:"870px"}}>
      <StyledTreeExample/>
        <PieChart width={400} height={400}>
          <Pie data={data01} dataKey="value" cx="50%" cy="50%" outerRadius={60} fill="#8884d8" />
          <Pie data={data02} dataKey="value" cx="50%" cy="50%" innerRadius={70} outerRadius={90} fill="#82ca9d" label />
        </PieChart>
    <img crossorigin="anonymous" src="https://images.pexels.com/photos/8443482/pexels-photo-8443482.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940" alt="alternatetext"/>
    <StyledTreeExample/>
        <PieChart width={400} height={400}>
          <Pie data={data01} dataKey="value" cx="50%" cy="50%" outerRadius={60} fill="#8884d8" />
          <Pie data={data02} dataKey="value" cx="50%" cy="50%" innerRadius={70} outerRadius={90} fill="#82ca9d" label />
        </PieChart>
    <img src="https://planworth-profile-pictures.s3.amazonaws.com/default_cover.png" alt="alternatetext"/>

    </div>
 </PDFExport>
 </div>
  );
}

export default App;
